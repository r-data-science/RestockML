% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/ml-sku-recs.R
\name{ml-sku-recs}
\alias{ml-sku-recs}
\alias{restock_rec_ep}
\alias{build_velocity_daily}
\alias{default_model_params}
\alias{model_sales_trend}
\alias{model_supply_risk}
\alias{classify_by_price}
\alias{classify_by_term}
\alias{classify_by_orders}
\alias{extract_help_text}
\alias{extract_rec_flags}
\alias{extract_meta_data}
\alias{assign_product_recs}
\title{Functions for Recommendations API}
\usage{
restock_rec_ep(
  oid,
  sid,
  sku,
  ml_conf = 0.9,
  ml_pval = 0.05,
  ml_ltmi = 182,
  ml_npom = 14,
  ml_prim = 0.45,
  ml_secd = 0.25,
  ml_ppql = 0.2,
  ml_ppqh = 0.8,
  ml_pair_ttest = FALSE,
  ml_pooled_var = FALSE,
  ml_trend_conf = ml_conf,
  ml_stock_conf = ml_conf,
  ml_trend_pval = ml_pval,
  ml_stock_pval = ml_pval,
  fail_on_error = FALSE,
  recs_only = FALSE,
  to_json = FALSE,
  auto_unbox = TRUE,
  na = "string",
  pretty = FALSE,
  ...
)

build_velocity_daily(pop)

default_model_params()

model_sales_trend(
  velocityDT,
  thresh_conf = 0.9,
  thresh_pval = 0.05,
  pool_var = TRUE,
  paired_test = FALSE
)

model_supply_risk(
  velocityDT,
  thresh_conf = 0.9,
  thresh_pval = 0.05,
  paired_test = FALSE,
  pool_var = FALSE
)

classify_by_price(velocityDT, catPriceDT, thresh_low = 0.2, thresh_high = 0.8)

classify_by_term(prodHistDT, thresh_long = 182, thresh_new = 14)

classify_by_orders(velocityDT, thresh_primary = 0.45, thresh_second = 0.25)

extract_help_text(ml_stock, ml_trend, sku_price, sku_term, sku_share)

extract_rec_flags(ml_stock, ml_trend, sku_price, sku_term, sku_share)

extract_meta_data(ml_stock, ml_trend, sku_price, sku_term, sku_share)

assign_product_recs(flags)
}
\arguments{
\item{oid}{org uuid}

\item{sid}{store uuid}

\item{sku}{one or more skus to generate recommendations for}

\item{ml_conf}{Model threshold - confidence level}

\item{ml_pval}{Model threshold - p value}

\item{ml_ltmi}{Model threshold - long-term menu item}

\item{ml_npom}{Model threshold - new product on menu}

\item{ml_prim}{Model threshold - primary product}

\item{ml_secd}{Model threshold - secondary product}

\item{ml_ppql}{Model threshold - product price quantile low}

\item{ml_ppqh}{Model threshold - product price quantile high}

\item{ml_pair_ttest}{Whether to pair the ttests. Default is FALSE}

\item{ml_pooled_var}{whether to pool the variance default is TRUE}

\item{ml_trend_conf}{When provided, will override the args applied to all models}

\item{ml_stock_conf}{When provided, will override the args applied to all models}

\item{ml_trend_pval}{When provided, will override the args applied to all models}

\item{ml_stock_pval}{When provided, will override the args applied to all models}

\item{fail_on_error}{if FALSE (default) response status will be 200/201/207 while status_code object in return value will be 400}

\item{recs_only}{default FALSE. If true drop all objects except the rec results before returning}

\item{to_json}{default FALSE Encode return object as JSON before returning}

\item{auto_unbox}{Only used if to_json is TRUE. see ?jsonlite::toJSON}

\item{na}{Only used if to_json is TRUE. see ?jsonlite::toJSON}

\item{pretty}{Only used if to_json is TRUE. see ?jsonlite::toJSON}

\item{...}{additional parameters to pass to jsonlite::toJSON}

\item{pop}{sales transactions dataset used to build velocity data for modeling}

\item{velocityDT}{output of \code{build_velocity_daily}}

\item{thresh_conf}{conf-level threshold for model}

\item{thresh_pval}{p-level threshold for model}

\item{pool_var}{whether to pool the variance in ttest. Default is TRUE}

\item{paired_test}{whether to run a paired ttest (default is FALSE)}

\item{catPriceDT}{output of \code{dbGetCatPricePts}}

\item{thresh_low}{percentile threshold for determining low price}

\item{thresh_high}{percentile threshold for determining high price}

\item{prodHistDT}{output of \code{dbGetProductHist}}

\item{thresh_long}{threshold in days for determining if a product is a long-term menu item}

\item{thresh_new}{threshold in days for determining if a product is a new menu item}

\item{thresh_primary}{percent threshold for identifying primary products}

\item{thresh_second}{percent threshold for identifying secondary products}

\item{ml_stock}{output of \code{model_supply_risk}}

\item{ml_trend}{output of \code{model_sales_trend}}

\item{sku_price}{output of \code{classify_by_price}}

\item{sku_term}{output of \code{classify_by_term}}

\item{sku_share}{output of \code{classify_by_orders}}

\item{flags}{return value of call to \code{extract_flags} in a prior rec step}
}
\description{
Arguments to the endpoint function \code{restock_rec_ep} that are of the form ml_* are
advanced use modeling parameters. If not provided, the default tuning values will be used
}
\section{Functions}{
\itemize{
\item \code{restock_rec_ep()}: this is an insights api endpoint exposed to archx that wraps all the steps
performed to generate recommendations into a single call and uses default threshold parameters
for the models used to create those recs

\item \code{build_velocity_daily()}: function to build velocity data for modeling

\item \code{default_model_params()}: helper function to load default model params

\item \code{model_sales_trend()}: Model sales trend

\item \code{model_supply_risk()}: Model Supply Risk

\item \code{classify_by_price()}: benchmark against category prices

\item \code{classify_by_term()}: Establish whether sku is long term or new on the menu

\item \code{classify_by_orders()}: Establish whether a product is a primary, secondary, or neither

\item \code{extract_help_text()}: Extract recommendation guidance

\item \code{extract_rec_flags()}: Join all results together and select columns needed for recommendation

\item \code{extract_meta_data()}: meta data used to generate flags

\item \code{assign_product_recs()}: assign recommendation of yes/no based on the flags associated with each sku

}}
